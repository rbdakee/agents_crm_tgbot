import logging
import asyncio
import os
import uuid
import re
import html
from typing import Dict, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import BOT_USERNAME, CONTRACTS_PER_PAGE
from database import crm
from collage import CollageInput, render_collage_to_image
from api_client import get_collage_data_from_api

logger = logging.getLogger(__name__)

# User-scoped state and cache structures
user_states: Dict[int, str] = {}
user_contracts: Dict[int, List[Dict]] = {}
user_current_page: Dict[int, int] = {}
user_search_results: Dict[int, List[Dict]] = {}
user_current_search_page: Dict[int, int] = {}
user_last_messages: Dict[int, object] = {}

# Temporary storage of collage building state per user
user_collage_inputs: Dict[int, CollageInput] = {}
user_pending_downloads: Dict[int, int] = {}


# Utilities
PHONE_CLEAN_RE = re.compile(r"[\d\+\-\(\)\s]+")
# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
NAME_CLEAN_RE = re.compile(r"[^–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-\']+", re.UNICODE)

async def show_loading(query) -> None:
    try:
        await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    except Exception:
        pass


def clean_client_name(client_info: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã"""
    if not client_info:
        return ""
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    cleaned = PHONE_CLEAN_RE.sub(" ", client_info)
    
    # –ó–∞—Ç–µ–º —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤
    cleaned = NAME_CLEAN_RE.sub("", cleaned)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
    cleaned = " ".join(cleaned.split())
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –¥–µ—Ñ–∏—Å—ã –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    cleaned = cleaned.strip(" -'")
    
    return cleaned.strip()


def get_status_value(contract: Dict) -> str:
    value = contract.get('–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞')
    if isinstance(value, str):
        value = value.strip()
    if not value:
        alt = contract.get('–°—Ç–∞—Ç—É—Å')
        if isinstance(alt, str):
            alt = alt.strip()
        value = alt or '–†–∞–∑–º–µ—â–µ–Ω–æ'
    return value


def build_pending_tasks(contract: Dict, status_value: str, analytics_mode_active: bool) -> List[str]:
    pending: List[str] = []
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        pending.append("‚ùå –ö–æ–ª–ª–∞–∂")
    if contract.get('–ö–æ–ª–ª–∞–∂') and not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        pending.append("‚ùå –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    def is_filled(value) -> bool:
        if value is None:
            return False
        if isinstance(value, str):
            return bool(value.strip())
        return bool(value)

    base_links_fields = [
        ("–ö—Ä—ã—à–∞", '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É'),
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–¢–∏–∫ —Ç–æ–∫'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–†–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–°—Ç—Ä–∏–º'),
    ]
    missing_base_links = [label for (label, field) in base_links_fields if not is_filled(contract.get(field))]
    if missing_base_links:
        pending.append("‚ùå –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏: " + ", ".join(missing_base_links))

    # –ó–∞–¥–∞—á–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º/—Å—Ç–∞—Ç—É—Å–∞–º
    if status_value == '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ':
        return pending

    if analytics_mode_active:
        if not contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
            pending.append("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        elif not contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
            pending.append("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π")
        if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π') and not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            pending.append("‚ùå –î–æ–∂–∏–º")
    elif status_value == '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã':
        if not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            pending.append("‚ùå –î–æ–∂–∏–º")
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        if not str(contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', '')).strip():
            pending.append("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã")
        # –ü–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã ‚Äî –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        updated_links_fields = [
            ("–ö—Ä—ã—à–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ'),
            ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º'),
            ("–¢–∏–∫—Ç–æ–∫", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫'),
            ("–†–∞—Å—Å—ã–ª–∫–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞'),
            ("–°—Ç—Ä–∏–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º'),
        ]
        missing_updated_links = [label for (label, field) in updated_links_fields if not is_filled(contract.get(field))]
        if missing_updated_links:
            pending.append("‚ùå –î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: " + ", ".join(missing_updated_links))

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –∏ –æ–±—ä–µ–∫—Ç –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    if not pending and status_value != '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ':
        pending.append("‚ùå –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Å–º–µ–Ω–∏—Ç–µ –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞")

    return pending


def get_agent_phone_by_name(agent_name: str) -> str:
    phone = crm.get_phone_by_agent(agent_name)
    return phone if phone else "N/A"


def build_main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã", callback_data="my_contracts")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="search_client")],
        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout_confirm")],
    ])


# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if context.args and context.args[0].startswith('crm_'):
        crm_id = context.args[0].replace('crm_', '')

        if user_states.get(user_id) == 'authenticated' and context.user_data.get('agent_name'):
            agent_name = context.user_data.get('agent_name')

            try:
                await update.message.delete()
            except:
                pass

            if user_id in user_last_messages:
                try:
                    await user_last_messages[user_id].delete()
                    del user_last_messages[user_id]
                except:
                    pass

            if user_id in user_search_results:
                del user_search_results[user_id]
            if user_id in user_current_search_page:
                del user_current_search_page[user_id]

            contract = await crm.search_contract_by_crm_id(crm_id, agent_name)

            if contract:
                await show_contract_detail_by_contract(update, context, contract)
            else:
                reply_markup = build_main_menu_keyboard()
                agent_phone = get_agent_phone_by_name(agent_name)
                await update.message.reply_text(
                    f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
                    f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                )
        else:
            context.user_data['pending_crm_id'] = crm_id
            user_states[user_id] = 'waiting_phone'

            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
            )
        return

    if user_states.get(user_id) == 'authenticated' and context.user_data.get('agent_name'):
        agent_name = context.user_data.get('agent_name')
        reply_markup = build_main_menu_keyboard()
        agent_phone = get_agent_phone_by_name(agent_name)
        await update.message.reply_text(
            f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
    else:
        user_states[user_id] = 'waiting_phone'
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )


async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = 'waiting_phone'
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )


async def my_contracts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    agent_name = context.user_data.get('agent_name')

    if not agent_name:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await show_loading(query)

    contracts = await crm.get_contracts_by_agent(agent_name)
    user_contracts[user_id] = contracts
    user_current_page[user_id] = 0

    if not contracts:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        return

    await show_contracts_page(query, contracts, 0)


async def show_contracts_page(query, contracts: List[Dict], page: int):
    contracts_per_page = CONTRACTS_PER_PAGE
    start_idx = page * contracts_per_page
    end_idx = start_idx + contracts_per_page
    page_contracts = contracts[start_idx:end_idx]

    message = "–í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã:\n\n"

    keyboard = []
    for contract in page_contracts:
        crm_id = contract.get('CRM ID', 'N/A')
        client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
        client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
        address = contract.get('–ê–¥—Ä–µ—Å', 'N/A')
        expires = contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')

        message += f"[CRM ID: {crm_id}](https://t.me/{BOT_USERNAME}?start=crm_{crm_id})\n"
        message += f"–ö–ª–∏–µ–Ω—Ç: {client_name}\n"
        message += f"–ê–¥—Ä–µ—Å: {address}\n"
        message += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}\n"
        message += "-"*30 + "\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        keyboard.append([InlineKeyboardButton(f"CRM iD: {crm_id}", callback_data=f"contract_{crm_id}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"prev_page_{page}"))
    if end_idx < len(contracts):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è", callback_data=f"next_page_{page}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    edited_message = await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

    user_id = query.from_user.id
    user_last_messages[user_id] = edited_message


async def show_search_results_page(message_or_query, contracts: List[Dict], page: int, client_name: str):
    contracts_per_page = CONTRACTS_PER_PAGE
    start_idx = page * contracts_per_page
    end_idx = start_idx + contracts_per_page
    page_contracts = contracts[start_idx:end_idx]

    message_text = f"–ù–∞–π–¥–µ–Ω–æ {len(contracts)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}':\n\n"

    keyboard = []
    for contract in page_contracts:
        crm_id = contract.get('CRM ID', 'N/A')
        client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
        client_name_clean = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
        address = contract.get('–ê–¥—Ä–µ—Å', 'N/A')
        expires = contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')

        message_text += f"[CRM ID: {crm_id}](https://t.me/{BOT_USERNAME}?start=crm_{crm_id})\n"
        message_text += f"–ö–ª–∏–µ–Ω—Ç: {client_name_clean}\n"
        message_text += f"–ê–¥—Ä–µ—Å: {address}\n"
        message_text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}\n"
        message_text += "-"*30 + "\n\n"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        keyboard.append([InlineKeyboardButton(f"CRM iD: {crm_id}", callback_data=f"contract_{crm_id}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"search_prev_page_{page}"))
    if end_idx < len(contracts):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è", callback_data=f"search_next_page_{page}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(message_or_query, 'edit_message_text'):
        edited_message = await message_or_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        user_id = message_or_query.from_user.id
        user_last_messages[user_id] = edited_message
    else:
        edited_message = await message_or_query.edit_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        user_id = message_or_query.from_user.id
        user_last_messages[user_id] = edited_message


async def show_contract_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    query = update.callback_query
    await query.answer()

    agent_name = context.user_data.get('agent_name')
    if not agent_name:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
    if not contract:
        await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫")
        return

    message = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ', 'N/A')}\n"
    message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message += f"üìå –°—Ç–∞—Ç—É—Å: {get_status_value(contract)}\n"
    message += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–†–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–°—Ç—Ä–∏–º'),
    ]
    available_links = []
    for label, field in link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_links:
        message += f"üîó –°—Å—ã–ª–∫–∏: {', '.join(available_links)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã), –µ—Å–ª–∏ –µ—Å—Ç—å
    updated_link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º'),
    ]
    available_updated_links = []
    for label, field in updated_link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_updated_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_updated_links:
        message += f"üîó –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {', '.join(available_updated_links)}\n\n"

    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    if contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
        message += "‚úÖ –î–æ–∂–∏–º\n"

    # –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    status_value = get_status_value(contract)
    analytics_mode_active = context.user_data.get('analytics_mode') == str(crm_id)

    # –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    pending = build_pending_tasks(contract, status_value, analytics_mode_active)
    if pending:
        message += "\nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å:\n" + "\n".join(pending) + "\n"

    # –ï—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ ‚Äî –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç
    if status_value == '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ':
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        return

    keyboard = []
    # –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –∫–æ–ª–ª–∞–∂/–ø—Ä–æ—Ñ/–ø–æ–∫–∞–∑
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂", callback_data=f"collage_build_{crm_id}")])
    if contract.get('–ö–æ–ª–ª–∞–∂') and not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])

    if status_value == '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã':
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã"
        if not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            keyboard.append([InlineKeyboardButton("–î–æ–∂–∏–º", callback_data=f"push_{crm_id}")])
        if not str(contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', '')).strip():
            keyboard.append([InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])
    elif analytics_mode_active:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if not contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"analytics_done_{crm_id}")])
        if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞') and not contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π", callback_data=f"analytics_provided_{crm_id}")])
        if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π') and not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            keyboard.append([InlineKeyboardButton("–î–æ–∂–∏–º", callback_data=f"push_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])
    else:
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "my_contracts":
        await my_contracts(update, context)

    elif data.startswith("contract_"):
        crm_id = data.replace("contract_", "")
        user_id = update.effective_user.id
        user_states[user_id] = 'authenticated'
        await show_loading(query)
        await show_contract_detail(update, context, crm_id)

    elif data.startswith("prev_page_"):
        page = int(data.replace("prev_page_", ""))
        user_id = update.effective_user.id
        contracts = user_contracts.get(user_id, [])
        await show_loading(query)
        await show_contracts_page(query, contracts, page - 1)
        user_current_page[user_id] = page - 1

    elif data.startswith("next_page_"):
        page = int(data.replace("next_page_", ""))
        user_id = update.effective_user.id
        contracts = user_contracts.get(user_id, [])
        await show_loading(query)
        await show_contracts_page(query, contracts, page + 1)
        user_current_page[user_id] = page + 1

    elif data.startswith("search_prev_page_"):
        page = int(data.replace("search_prev_page_", ""))
        user_id = update.effective_user.id
        contracts = user_search_results.get(user_id, [])
        client_name = context.user_data.get('last_search_client', '')
        await show_loading(query)
        await show_search_results_page(query, contracts, page - 1, client_name)
        user_current_search_page[user_id] = page - 1

    elif data.startswith("search_next_page_"):
        page = int(data.replace("search_next_page_", ""))
        user_id = update.effective_user.id
        contracts = user_search_results.get(user_id, [])
        client_name = context.user_data.get('last_search_client', '')
        await show_loading(query)
        await show_search_results_page(query, contracts, page + 1, client_name)
        user_current_search_page[user_id] = page + 1

    elif data.startswith("collage_build_"):
        crm_id = data.replace("collage_build_", "")
        user_id = update.effective_user.id
        await show_loading(query)
        await query.edit_message_text("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            collage_input = await get_collage_data_from_api(crm_id)
            if not collage_input:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRM ID.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–µ—à–∞ n8n
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract and contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä'):
                    client_info = contract['–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä']
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è) –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    raw_client_name = client_info.split(':')[0].strip()
                    client_name = clean_client_name(raw_client_name)
                    collage_input.client_name = client_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_collage_inputs[user_id] = collage_input
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await show_collage_data_with_edit_buttons(query, collage_input, crm_id)
        except Exception as e:
            logger.error(f"Error getting collage data from API: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CRM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif data.startswith("collage_proceed_"):
        crm_id = data.replace("collage_proceed_", "")
        user_id = update.effective_user.id
        user_states[user_id] = f'waiting_collage_photos_{crm_id}'
        
        await query.edit_message_text(
            f"üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ (1-5 —à—Ç—É–∫).\n"
            f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ '–æ—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å."
        )

    elif data.startswith("edit_collage_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∫–æ–ª–ª–∞–∂–∞
        parts = data.replace("edit_collage_", "").split("_")
        field = parts[0]
        crm_id = parts[1]
        user_id = update.effective_user.id
        
        field_names = {
            'client': '–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞',
            'complex': '–Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö',
            'address': '–∞–¥—Ä–µ—Å',
            'area': '–ø–ª–æ—â–∞–¥—å',
            'rooms': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
            'floor': '—ç—Ç–∞–∂',
            'price': '—Ü–µ–Ω—É',
            'class': '–∫–ª–∞—Å—Å –∂–∏–ª—å—è',
            'rop': '–∏–º—è –†–û–ü',
            'phone': '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–≥–µ–Ω—Ç–∞',
            'benefits': '–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞'
        }
        
        field_name = field_names.get(field, field)
        user_states[user_id] = f'editing_collage_{field}_{crm_id}'
        
        if field == 'benefits':
            ci = user_collage_inputs.get(user_id)
            if ci and ci.benefits:
                benefits_text = "\n".join([f"{i+1}. {benefit}" for i, benefit in enumerate(ci.benefits)])
                await query.edit_message_text(
                    f"üìã –¢–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞:\n{benefits_text}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:"
                )
            else:
                await query.edit_message_text(
                    f"üìã –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:"
                )
        else:
            await query.edit_message_text(
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_name}' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:"
            )

    elif data.startswith("collage_save_"):
        crm_id = data.replace("collage_save_", "")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        try:
            await query.edit_message_caption(caption="–ö–æ–ª–ª–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception:
            await query.answer("–ö–æ–ª–ª–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
        success = await crm.update_contract(crm_id, {"collage": True})
        if success:
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                await crm.refresh_agent_cache(agent_name)
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                    await send_contract_detail_directly(update.effective_chat, context, contract)
                else:
                    await update.effective_chat.send_message("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.effective_chat.send_message("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("collage_redo_"):
        crm_id = data.replace("collage_redo_", "")
        user_id = update.effective_user.id
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        try:
            await query.edit_message_caption(caption="–ö–æ–ª–ª–∞–∂ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è...")
        except Exception:
            await query.answer("–ö–æ–ª–ª–∞–∂ –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∑–∞–Ω–æ–≤–æ
            collage_input = await get_collage_data_from_api(crm_id)
            if not collage_input:
                await update.effective_chat.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRM ID.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–µ—à–∞ n8n
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract and contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä'):
                    client_info = contract['–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä']
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è) –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    raw_client_name = client_info.split(':')[0].strip()
                    client_name = clean_client_name(raw_client_name)
                    collage_input.client_name = client_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_collage_inputs[user_id] = collage_input
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π query –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            class FakeQuery:
                async def edit_message_text(self, text, reply_markup=None):
                    await update.effective_chat.send_message(text, reply_markup=reply_markup)
            
            fake_query = FakeQuery()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await show_collage_data_with_edit_buttons(fake_query, collage_input, crm_id)
        except Exception as e:
            logger.error(f"Error getting collage data from API: {e}")
            await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CRM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif data.startswith("collage_cancel_"):
        crm_id = data.replace("collage_cancel_", "")
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_collage_inputs.pop(user_id, None)
        user_states[user_id] = 'authenticated'
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        try:
            await query.edit_message_caption(caption="–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception:
            await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –æ–±—ä–µ–∫—Ç–∞
        agent_name = context.user_data.get('agent_name')
        if agent_name:
            contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
            if contract:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                await send_contract_detail_directly(update.effective_chat, context, contract)
            else:
                await update.effective_chat.send_message("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await update.effective_chat.send_message("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    elif data.startswith("action_pro_collage_"):
        crm_id = data.replace("action_pro_collage_", "")
        await show_loading(query)
        success = await crm.update_contract(crm_id, {"updatedCollage": True})
        if success:
            await query.answer("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                await crm.refresh_agent_cache(agent_name)
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("action_show_"):
        crm_id = data.replace("action_show_", "")
        agent_name = context.user_data.get('agent_name')
        if not agent_name:
            await query.answer("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        await show_loading(query)
        contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
        if not contract:
            await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        current_show = int(contract.get('–ü–æ–∫–∞–∑', 0))
        success = await crm.update_contract(crm_id, {"show": current_show + 1})
        if success:
            await query.answer(f"–ü–æ–∫–∞–∑ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {current_show + 1}")
            await crm.refresh_agent_cache(agent_name)
            contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
            if contract:
                await show_contract_detail_by_contract(update, context, contract)
            else:
                await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("analytics_done_"):
        crm_id = data.replace("analytics_done_", "")
        await show_loading(query)
        success = await crm.update_contract(crm_id, {"analytics": True})
        if success:
            await query.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–Ω–∞—è")
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                await crm.refresh_agent_cache(agent_name)
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("analytics_provided_"):
        crm_id = data.replace("analytics_provided_", "")
        await show_loading(query)
        success = await crm.update_contract(crm_id, {"analyticsIn5Days": True})
        if success:
            await query.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è")
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                await crm.refresh_agent_cache(agent_name)
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("status_menu_"):
        crm_id = data.replace("status_menu_", "")
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data=f"status_set_{crm_id}_analytics_mode")],
            [InlineKeyboardButton("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã", callback_data=f"status_set_{crm_id}_price_adjust")],
            [InlineKeyboardButton("–ù–∞ –∑–∞–¥–∞—Ç–∫–µ", callback_data=f"status_set_{crm_id}_deposit")],
            [InlineKeyboardButton("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", callback_data=f"status_set_{crm_id}_completed")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"contract_{crm_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await show_loading(query)
        await query.edit_message_text("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=reply_markup)

    elif data.startswith("status_set_"):
        remaining = data.replace("status_set_", "")
        parts = remaining.split("_")
        crm_id = parts[0]
        status_key = parts[1]
        status_map = {
            'analyticsmode': '–†–∞–∑–º–µ—â–µ–Ω–æ',
        }
        if status_key == 'analytics' or status_key == 'analyticsmode':
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–∫–Ω–æ–ø–∫–∏ –≤ –¥–µ—Ç–∞–ª—è—Ö) –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
            context.user_data['analytics_mode'] = crm_id
            await show_loading(query)
            await show_contract_detail(update, context, crm_id)
        else:
            updates = {}
            if status_key == 'price':
                updates['status'] = '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã'
            elif status_key == 'priceadjust':
                updates['status'] = '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã'
            elif status_key == 'deposit':
                updates['status'] = '–ó–∞–¥–∞—Ç–æ–∫/–°–¥–µ–ª–∫–∞'
            elif status_key == 'completed':
                updates['status'] = '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'
            else:
                updates['status'] = '–†–∞–∑–º–µ—â–µ–Ω–æ'
            await show_loading(query)
            success = await crm.update_contract(crm_id, updates)
            if success:
                await query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
                agent_name = context.user_data.get('agent_name')
                if agent_name:
                    await crm.refresh_agent_cache(agent_name)
                    contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                    if contract:
                        await show_contract_detail_by_contract(update, context, contract)
                    else:
                        await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("push_"):
        crm_id = data.replace("push_", "")
        await show_loading(query)
        success = await crm.update_contract(crm_id, {"pricePush": True})
        if success:
            # –ï—Å–ª–∏ –±—ã–ª —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –¥–æ–∂–∏–º —Å–¥–µ–ª–∞–Ω, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã"
            updates = {"status": '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã'}
            await crm.update_contract(crm_id, updates)
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                await crm.refresh_agent_cache(agent_name)
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

    elif data.startswith("analytics_"):
        crm_id = data.replace("analytics_", "")
        agent_name = context.user_data.get('agent_name')
        if not agent_name:
            await query.answer("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
        if not contract:
            await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        analytics_done = contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', False)
        analytics_provided = contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π', False)
        keyboard = []
        if not analytics_done:
            keyboard.append([InlineKeyboardButton("–°–¥–µ–ª–∞–Ω–æ", callback_data=f"analytics_done_{crm_id}")])
        if not analytics_provided:
            keyboard.append([InlineKeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–ø–æ—Å–ª–µ 5 –¥–Ω–µ–π)", callback_data=f"analytics_provided_{crm_id}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"contract_{crm_id}")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await show_loading(query)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ:", reply_markup=reply_markup)

    # –£–¥–∞–ª–µ–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é links_

    elif data.startswith("price_adjust_"):
        crm_id = data.replace("price_adjust_", "")
        user_id = update.effective_user.id
        user_states[user_id] = f'waiting_price_{crm_id}'
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"contract_{crm_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
        await show_loading(query)
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è CRM ID {crm_id}:", reply_markup=back_keyboard)

    # –£–¥–∞–ª–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ view_links_

    elif data.startswith("add_link_"):
        crm_id = data.replace("add_link_", "")
        await show_loading(query)
        await show_add_link_menu(update, context, crm_id)

    elif data.startswith("link_type_"):
        remaining = data.replace("link_type_", "")
        parts = remaining.split("_")
        crm_id = parts[0]
        link_type = "_".join(parts[1:])
        user_id = update.effective_user.id
        user_states[user_id] = f'waiting_link_{crm_id}_{link_type}'
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"contract_{crm_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
        await show_loading(query)
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è {link_type}:", reply_markup=back_keyboard)

    elif data == "search_client":
        user_id = update.effective_user.id
        user_states[user_id] = 'waiting_client_search'
        await show_loading(query)
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    elif data == "main_menu":
        user_id = update.effective_user.id
        user_states[user_id] = 'authenticated'
        agent_name = context.user_data.get('agent_name')
        if not agent_name:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        reply_markup = build_main_menu_keyboard()
        agent_phone = get_agent_phone_by_name(agent_name)
        await show_loading(query)
        await query.edit_message_text(
            f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )

    elif data == "logout_confirm":
        user_id = update.effective_user.id
        user_states[user_id] = 'waiting_phone'
        context.user_data.clear()
        if user_id in user_last_messages:
            del user_last_messages[user_id]
        await show_loading(query)
        await query.edit_message_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )


async def show_links_view(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")


async def show_add_link_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    query = update.callback_query
    await query.answer()

    agent_name = context.user_data.get('agent_name')
    contract = None
    if agent_name:
        await crm.refresh_agent_cache(agent_name)
        contract = await crm.search_contract_by_crm_id(crm_id, agent_name)

    def create_button(text, callback_data, has_link=False):
        button_text = f"‚úÖ {text}" if has_link else text
        return InlineKeyboardButton(button_text, callback_data=callback_data)

    def is_field_filled(value):
        if value is None:
            return False
        if isinstance(value, str):
            return bool(value.strip())
        return bool(value)

    links_status = {
        'krisha': contract.get('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É', '') if contract else '',
        'krisha_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ', '') if contract else '',
        'instagram': contract.get('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', '') if contract else '',
        'instagram_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '') if contract else '',
        'tiktok': contract.get('–¢–∏–∫ —Ç–æ–∫', '') if contract else '',
        'tiktok_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫', '') if contract else '',
        'mailing': contract.get('–†–∞—Å—Å—ã–ª–∫–∞', '') if contract else '',
        'mailing_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞', '') if contract else '',
        'stream': contract.get('–°—Ç—Ä–∏–º', '') if contract else '',
        'stream_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º', '') if contract else ''
    }

    keyboard = [
        [create_button("–ö—Ä—ã—à–∞", f"link_type_{crm_id}_krisha", is_field_filled(links_status['krisha']))],
        [create_button("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", f"link_type_{crm_id}_instagram", is_field_filled(links_status['instagram']))],
        [create_button("–¢–∏–∫—Ç–æ–∫", f"link_type_{crm_id}_tiktok", is_field_filled(links_status['tiktok']))],
        [create_button("–†–∞—Å—Å—ã–ª–∫–∞", f"link_type_{crm_id}_mailing", is_field_filled(links_status['mailing']))],
        [create_button("–°—Ç—Ä–∏–º", f"link_type_{crm_id}_stream", is_field_filled(links_status['stream']))],
        [create_button("–ö—Ä—ã—à–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_krisha_update", is_field_filled(links_status['krisha_update']))],
        [create_button("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_instagram_update", is_field_filled(links_status['instagram_update']))],
        [create_button("–¢–∏–∫—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_tiktok_update", is_field_filled(links_status['tiktok_update']))],
        [create_button("–†–∞—Å—Å—ã–ª–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_mailing_update", is_field_filled(links_status['mailing_update']))],
        [create_button("–°—Ç—Ä–∏–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_stream_update", is_field_filled(links_status['stream_update']))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É", callback_data=f"contract_{crm_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)


async def show_links_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    # –°—Ç–∞—Ä–æ–µ –º–µ–Ω—é —Å—Å—ã–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è; –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    await show_add_link_menu(update, context, crm_id)


async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_states.get(user_id, '')

    if state.startswith('waiting_price_'):
        crm_id = state.replace('waiting_price_', '')
        new_price = update.message.text.strip()
        loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        success = await crm.update_contract(crm_id, {"priceAdjustment": new_price})
        if success:
            await loading_msg.edit_text(f"–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_price}")
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
            user_states[user_id] = 'authenticated'
        else:
            await loading_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")

    elif state.startswith('waiting_link_'):
        remaining = state.replace('waiting_link_', '')
        parts = remaining.split('_')
        crm_id = parts[0]
        link_type = '_'.join(parts[1:])
        link_url = update.message.text.strip()
        loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        agent_name = context.user_data.get('agent_name')
        if not agent_name:
            await loading_msg.edit_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
        if not contract:
            await loading_msg.edit_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        field_mapping = {
            'krisha': 'krishaUpload',
            'krisha_update': 'priceUpdateKrisha',
            'instagram': 'instagram',
            'instagram_update': 'priceUpdateInstagram',
            'tiktok': 'tikTok',
            'tiktok_update': 'priceUpdateTikTok',
            'mailing': 'mailing',
            'mailing_update': 'priceUpdateMailing',
            'stream': 'stream',
            'stream_update': 'priceUpdateStream',
        }
        field_name = field_mapping.get(link_type)
        if not field_name:
            await loading_msg.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏")
            return

        display_names = {
            'krisha': '–ö—Ä—ã—à–∞',
            'krisha_update': '–ö—Ä—ã—à–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'instagram': '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º',
            'instagram_update': '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'tiktok': '–¢–∏–∫—Ç–æ–∫',
            'tiktok_update': '–¢–∏–∫—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'mailing': '–†–∞—Å—Å—ã–ª–∫–∞',
            'mailing_update': '–†–∞—Å—Å—ã–ª–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'stream': '–°—Ç—Ä–∏–º',
            'stream_update': '–°—Ç—Ä–∏–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
        }
        field_display_name = display_names.get(link_type, link_type)

        success = await crm.update_contract(crm_id, {field_name: link_url})
        if success:
            await loading_msg.edit_text(f"–°—Å—ã–ª–∫–∞ {field_display_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            await crm.refresh_agent_cache(agent_name)
            contract = await crm.search_contract_by_crm_id(crm_id, agent_name)
            if contract:
                await show_contract_detail_by_contract(update, context, contract)
        else:
            await loading_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")

        user_states[user_id] = 'authenticated'

    elif state.startswith('waiting_collage_photos_'):
        text = update.message.text.strip()
        if text.lower() == '–æ—Ç–º–µ–Ω–∞':
            user_states[user_id] = 'authenticated'
            user_collage_inputs.pop(user_id, None)
            await update.message.reply_text('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
            return
        
        # User should send '–ì–æ—Ç–æ–≤–æ' to finish
        if text.lower() in ('–≥–æ—Ç–æ–≤–æ', '–≥–æ—Ç–æ–≤–æ.', '–≥–æ—Ç–æ–≤'):            
            crm_id = state.replace('waiting_collage_photos_', '')
            ci = user_collage_inputs.get(user_id)
            if not ci or not ci.photos:
                await update.message.reply_text('–ù–µ –ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –û—Ç–º–µ–Ω–∞.')
                return
            status_msg = await update.message.reply_text('–°–æ–∑–¥–∞—é –∫–æ–ª–ª–∞–∂, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
            
            def _cleanup_files():
                try:
                    # –£–¥–∞–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π PNG –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML
                    png_path = os.path.join('data', f"collage_{ci.crm_id}.png")
                    html_path = os.path.join('data', f"collage_{ci.crm_id}.html")
                    for p in [png_path, html_path]:
                        try:
                            if os.path.exists(p):
                                os.remove(p)
                        except Exception:
                            logger.exception('Failed to remove temp file %s', p)
                    # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ
                    for p in list(ci.photos or []):
                        try:
                            if os.path.exists(p):
                                os.remove(p)
                        except Exception:
                            logger.exception('Failed to remove user photo %s', p)
                except Exception:
                    logger.exception('Cleanup error')

            async def _render_and_send():
                image_path = await render_collage_to_image(ci)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–ª–ª–∞–∂–µ–º
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–ª–ª–∞–∂", callback_data=f"collage_save_{crm_id}")],
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data=f"collage_redo_{crm_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=f"collage_cancel_{crm_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        with open(image_path, 'rb') as f:
                            await update.message.reply_photo(
                                photo=f, 
                                caption='–ö–æ–ª–ª–∞–∂ –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                reply_markup=reply_markup,
                                read_timeout=60,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                                write_timeout=60
                            )
                        break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    except Exception as e:
                        if attempt == max_retries - 1:
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                            logger.error(f"Failed to send collage after {max_retries} attempts: {e}")
                            await update.message.reply_text(
                                f"‚ùå –ö–æ–ª–ª–∞–∂ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é.\n"
                                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂ –µ—â–µ —Ä–∞–∑."
                            )
                            raise
                        else:
                            logger.warning(f"Attempt {attempt + 1} failed, retrying: {e}")
                            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                
                try:
                    await status_msg.delete()
                except Exception:
                    pass
            
            try:
                await asyncio.wait_for(_render_and_send(), timeout=180)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º-–∞—É—Ç
            except asyncio.TimeoutError:
                try:
                    await status_msg.edit_text('‚è∞ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂ –∑–∞ 3 –º–∏–Ω—É—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
                except Exception:
                    pass
            except Exception as e:
                logger.exception('Collage render/send failed')
                try:
                    await status_msg.delete()
                except Exception:
                    pass
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–∞–∂–∞."
                if "TimedOut" in str(e) or "ReadTimeout" in str(e) or "SSLWantReadError" in str(e):
                    error_msg = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–ª–ª–∞–∂–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                elif "SSL" in str(e):
                    error_msg = "üîí –ü—Ä–æ–±–ª–µ–º—ã —Å SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                
                await update.message.reply_text(f"{error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            finally:
                _cleanup_files()
            
            # cleanup
            user_states[user_id] = 'authenticated'
            user_collage_inputs.pop(user_id, None)
            return


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_states.get(user_id, '')
    if state == 'waiting_phone':
        await handle_phone(update, context)
    elif state.startswith('waiting_price_') or state.startswith('waiting_link_') or state.startswith('waiting_collage_photos_'):
        await handle_price_input(update, context)
    elif state.startswith('editing_collage_'):
        await handle_collage_edit(update, context)
    elif state == 'waiting_client_search':
        await handle_client_search(update, context)


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = user_states.get(user_id, '')
    if not state.startswith('waiting_collage_photos_'):
        return
    ci = user_collage_inputs.get(user_id)
    if not ci:
        return
    try:
        user_pending_downloads[user_id] = user_pending_downloads.get(user_id, 0) + 1
        photo_sizes = update.message.photo
        if not photo_sizes:
            return
        # get best resolution
        file_id = photo_sizes[-1].file_id
        file = await context.bot.get_file(file_id)
        photos_dir = os.path.join('data')
        os.makedirs(photos_dir, exist_ok=True)
        local_path = os.path.join(photos_dir, f"collage_{uuid.uuid4().hex}.jpg")
        await file.download_to_drive(local_path)
        if not ci.photos:
            ci.photos = []
        if len(ci.photos) < 5:
            ci.photos.append(local_path)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
    finally:
        user_pending_downloads[user_id] = max(0, user_pending_downloads.get(user_id, 1) - 1)


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_states.get(user_id) != 'waiting_phone':
        return
    
    phone = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not crm.is_valid_phone(phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 87777777777\n"
            "‚Ä¢ +77777777777\n"
            "‚Ä¢ 7777777777\n"
            "‚Ä¢ 8777777777\n\n"
            "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10-11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 8 –∏–ª–∏ 7."
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    normalized_phone = crm.normalize_phone(phone)
    agent_name = crm.get_agent_by_phone(normalized_phone)
    
    if agent_name:
        user_states[user_id] = 'authenticated'
        context.user_data['agent_name'] = agent_name
        context.user_data['phone'] = normalized_phone
        reply_markup = build_main_menu_keyboard()
        pending_crm_id = context.user_data.get('pending_crm_id')
        if pending_crm_id:
            del context.user_data['pending_crm_id']
            loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            contract = await crm.search_contract_by_crm_id(pending_crm_id, agent_name)
            if contract:
                await loading_msg.delete()
                await show_contract_detail_by_contract(update, context, contract)
            else:
                await loading_msg.edit_text(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å CRM ID {pending_crm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫")
                agent_phone = get_agent_phone_by_name(agent_name)
                await update.message.reply_text(
                    f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
                    f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                )
        else:
            agent_phone = get_agent_phone_by_name(agent_name)
            await update.message.reply_text(
                f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
                f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {phone}\n"
            f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {normalized_phone}"
        )


async def handle_client_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    client_name = update.message.text.strip()
    agent_name = context.user_data.get('agent_name')
    if not agent_name:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        user_states[user_id] = 'authenticated'
        return
    loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    contracts = await crm.search_contracts_by_client_name(client_name, agent_name)
    if contracts:
        if len(contracts) == 1:
            await show_contract_detail_by_contract(update, context, contracts[0])
        else:
            user_search_results[user_id] = contracts
            user_current_search_page[user_id] = 0
            context.user_data['last_search_client'] = client_name
            await show_search_results_page(loading_msg, contracts, 0, client_name)
    else:
        await loading_msg.edit_text(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫")
        reply_markup = build_main_menu_keyboard()
        agent_phone = get_agent_phone_by_name(agent_name)
        await update.message.reply_text(
            f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
        )
    user_states[user_id] = 'authenticated'


async def send_contract_detail_directly(chat, context: ContextTypes.DEFAULT_TYPE, contract: Dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç"""
    crm_id = contract.get('CRM ID', 'N/A')
    message = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ', 'N/A')}\n"
    message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message += f"üìå –°—Ç–∞—Ç—É—Å: {get_status_value(contract)}\n"
    message += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–†–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–°—Ç—Ä–∏–º'),
    ]
    available_links = []
    for label, field in link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_links:
        message += f"üîó –°—Å—ã–ª–∫–∏: {', '.join(available_links)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã), –µ—Å–ª–∏ –µ—Å—Ç—å
    updated_link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º'),
    ]
    available_updated_links = []
    for label, field in updated_link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_updated_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_updated_links:
        message += f"üîó –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {', '.join(available_updated_links)}\n\n"

    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    if contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
        message += "‚úÖ –î–æ–∂–∏–º\n"

    status_value = get_status_value(contract)
    analytics_mode_active = context.user_data.get('analytics_mode') == str(crm_id)

    # –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    pending = build_pending_tasks(contract, status_value, analytics_mode_active)
    if pending:
        message += "\nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å:\n" + "\n".join(pending) + "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂", callback_data=f"collage_build_{crm_id}")])
    if contract.get('–ö–æ–ª–ª–∞–∂') and not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])

    if status_value == '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã':
        if not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            keyboard.append([InlineKeyboardButton("–î–æ–∂–∏–º", callback_data=f"push_{crm_id}")])
        if not str(contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', '')).strip():
            keyboard.append([InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])
    elif analytics_mode_active:
        if not contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–¥–µ–ª–∞–Ω–æ", callback_data=f"analytics_done_{crm_id}")])
        if not contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"analytics_provided_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data=f"exit_analytics_{crm_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await chat.send_message(message, reply_markup=reply_markup, parse_mode='HTML')


async def send_contract_detail_message(update: Update, context: ContextTypes.DEFAULT_TYPE, contract: Dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    crm_id = contract.get('CRM ID', 'N/A')
    message = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ', 'N/A')}\n"
    message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message += f"üìå –°—Ç–∞—Ç—É—Å: {get_status_value(contract)}\n"
    message += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–†–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–°—Ç—Ä–∏–º'),
    ]
    available_links = []
    for label, field in link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_links:
        message += f"üîó –°—Å—ã–ª–∫–∏: {', '.join(available_links)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã), –µ—Å–ª–∏ –µ—Å—Ç—å
    updated_link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º'),
    ]
    available_updated_links = []
    for label, field in updated_link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_updated_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_updated_links:
        message += f"üîó –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {', '.join(available_updated_links)}\n\n"

    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    if contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
        message += "‚úÖ –î–æ–∂–∏–º\n"

    status_value = get_status_value(contract)
    analytics_mode_active = context.user_data.get('analytics_mode') == str(crm_id)

    # –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    pending = build_pending_tasks(contract, status_value, analytics_mode_active)
    if pending:
        message += "\nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å:\n" + "\n".join(pending) + "\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂", callback_data=f"collage_build_{crm_id}")])
    if contract.get('–ö–æ–ª–ª–∞–∂') and not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])

    if status_value == '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã':
        if not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            keyboard.append([InlineKeyboardButton("–î–æ–∂–∏–º", callback_data=f"push_{crm_id}")])
        if not str(contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', '')).strip():
            keyboard.append([InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])
    elif analytics_mode_active:
        if not contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–¥–µ–ª–∞–Ω–æ", callback_data=f"analytics_done_{crm_id}")])
        if not contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"analytics_provided_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data=f"exit_analytics_{crm_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_chat.send_message(message, reply_markup=reply_markup, parse_mode='HTML')


async def show_contract_detail_by_contract(update: Update, context: ContextTypes.DEFAULT_TYPE, contract: Dict):
    crm_id = contract.get('CRM ID', 'N/A')
    message = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –¥–æ–≥–æ–≤–æ—Ä–µ', 'N/A')}\n"
    message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message += f"üìå –°—Ç–∞—Ç—É—Å: {get_status_value(contract)}\n"
    message += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–†–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–°—Ç—Ä–∏–º'),
    ]
    available_links = []
    for label, field in link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_links:
        message += f"üîó –°—Å—ã–ª–∫–∏: {', '.join(available_links)}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã), –µ—Å–ª–∏ –µ—Å—Ç—å
    updated_link_fields = [
        ("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º'),
        ("–¢–∏–∫—Ç–æ–∫", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫'),
        ("–ö—Ä—ã—à–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ'),
        ("–†–∞—Å—Å—ã–ª–∫–∞", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞'),
        ("–°—Ç—Ä–∏–º", '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º'),
    ]
    available_updated_links = []
    for label, field in updated_link_fields:
        value = contract.get(field)
        url = value.strip() if isinstance(value, str) else ''
        if url:
            safe_url = html.escape(url, quote=True)
            available_updated_links.append(f"<a href=\"{safe_url}\">{label}</a>")
    if available_updated_links:
        message += f"üîó –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {', '.join(available_updated_links)}\n\n"

    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    if contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
        message += "‚úÖ –î–æ–∂–∏–º\n"

    status_value = get_status_value(contract)
    analytics_mode_active = context.user_data.get('analytics_mode') == str(crm_id)

    # –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    pending = build_pending_tasks(contract, status_value, analytics_mode_active)
    if pending:
        message += "\nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å:\n" + "\n".join(pending) + "\n"

    if status_value == '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ':
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
        return

    keyboard = []
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂", callback_data=f"collage_build_{crm_id}")])
    if contract.get('–ö–æ–ª–ª–∞–∂') and not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])

    analytics_mode_active = context.user_data.get('analytics_mode') == str(crm_id)
    if status_value == '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã':
        if not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            keyboard.append([InlineKeyboardButton("–î–æ–∂–∏–º", callback_data=f"push_{crm_id}")])
        if not str(contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', '')).strip():
            keyboard.append([InlineKeyboardButton("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])
    elif analytics_mode_active:
        if not contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"analytics_done_{crm_id}")])
        if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞') and not contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
            keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π", callback_data=f"analytics_provided_{crm_id}")])
        if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π') and not contract.get('–î–æ–∂–∏–º –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—É'):
            keyboard.append([InlineKeyboardButton("–î–æ–∂–∏–º", callback_data=f"push_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")])
        keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞", callback_data=f"status_menu_{crm_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    else:
        sent_message = await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
        user_id = update.effective_user.id
        user_last_messages[user_id] = sent_message


async def handle_collage_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –∫–æ–ª–ª–∞–∂–∞"""
    user_id = update.effective_user.id
    state = user_states.get(user_id, '')
    text = update.message.text.strip()
    
    if text.lower() == '–æ—Ç–º–µ–Ω–∞':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–∞–∂–∞
        parts = state.replace('editing_collage_', '').split('_')
        crm_id = parts[1]
        ci = user_collage_inputs.get(user_id)
        if ci:
            user_states[user_id] = 'authenticated'
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π query –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            class FakeQuery:
                async def edit_message_text(self, text, reply_markup=None):
                    await update.message.reply_text(text, reply_markup=reply_markup)
            
            fake_query = FakeQuery()
            await show_collage_data_with_edit_buttons(fake_query, ci, crm_id)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ –∏ crm_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    parts = state.replace('editing_collage_', '').split('_')
    field = parts[0]
    crm_id = parts[1]
    
    ci = user_collage_inputs.get(user_id)
    if not ci:
        await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        user_states[user_id] = 'authenticated'
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    if field == 'client':
        ci.client_name = text
    elif field == 'complex':
        ci.complex_name = text
    elif field == 'address':
        ci.address = text
    elif field == 'area':
        ci.area_sqm = text
    elif field == 'rooms':
        ci.rooms = text
    elif field == 'floor':
        ci.floor = text
    elif field == 'price':
        ci.price = text
    elif field == 'class':
        ci.housing_class = text
    elif field == 'rop':
        ci.rop = text
    elif field == 'phone':
        ci.agent_phone = text
    elif field == 'benefits':
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—É—Å—Ç—ã—Ö
        benefits = [line.strip() for line in text.split('\n') if line.strip()]
        ci.benefits = benefits
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_collage_inputs[user_id] = ci
    user_states[user_id] = 'authenticated'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    class FakeQuery:
        async def edit_message_text(self, text, reply_markup=None):
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    fake_query = FakeQuery()
    await show_collage_data_with_edit_buttons(fake_query, ci, crm_id)


async def show_collage_data_with_edit_buttons(query, collage_input: CollageInput, crm_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    message = f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞:\n\n"
    message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {collage_input.client_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    message += f"üè¢ –ñ–ö: {collage_input.complex_name}\n"
    message += f"üìç –ê–¥—Ä–µ—Å: {collage_input.address}\n"
    message += f"üìê –ü–ª–æ—â–∞–¥—å: {collage_input.area_sqm} –º¬≤\n"
    message += f"üè† –ö–æ–º–Ω–∞—Ç: {collage_input.rooms}\n"
    message += f"üèóÔ∏è –≠—Ç–∞–∂: {collage_input.floor}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {collage_input.price}\n"
    message += f"üèóÔ∏è –ö–ª–∞—Å—Å –∂–∏–ª—å—è: {collage_input.housing_class}\n"
    message += f"üë§ –†–û–ü: {collage_input.rop}\n"
    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∞–≥–µ–Ω—Ç–∞: {collage_input.agent_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
    
    # –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
    if collage_input.benefits:
        message += f"üìã –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ ({len(collage_input.benefits)} —à—Ç.):\n"
        for i, benefit in enumerate(collage_input.benefits, 1):
            message += f"   {i}. {benefit}\n"
        message += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("üë§ –ö–ª–∏–µ–Ω—Ç", callback_data=f"edit_collage_client_{crm_id}"),
            InlineKeyboardButton("üè¢ –ñ–ö", callback_data=f"edit_collage_complex_{crm_id}")
        ],
        [
            InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å", callback_data=f"edit_collage_address_{crm_id}"),
            InlineKeyboardButton("üìê –ü–ª–æ—â–∞–¥—å", callback_data=f"edit_collage_area_{crm_id}")
        ],
        [
            InlineKeyboardButton("üè† –ö–æ–º–Ω–∞—Ç—ã", callback_data=f"edit_collage_rooms_{crm_id}"),
            InlineKeyboardButton("üèóÔ∏è –≠—Ç–∞–∂", callback_data=f"edit_collage_floor_{crm_id}")
        ],
        [
            InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data=f"edit_collage_price_{crm_id}"),
            InlineKeyboardButton("üèóÔ∏è –ö–ª–∞—Å—Å", callback_data=f"edit_collage_class_{crm_id}")
        ],
        [
            InlineKeyboardButton("üë§ –†–û–ü", callback_data=f"edit_collage_rop_{crm_id}"),
            InlineKeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_collage_phone_{crm_id}")
        ],
        [
            InlineKeyboardButton("üìã –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞", callback_data=f"edit_collage_benefits_{crm_id}")
        ],
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ñ–æ—Ç–æ", callback_data=f"collage_proceed_{crm_id}"),
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"contract_{crm_id}")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)


def setup_handlers(application: Application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("logout", logout))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))


