import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from config import BOT_TOKEN, BOT_USERNAME, CONTRACTS_PER_PAGE
from database import crm

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_contracts = {}
user_current_page = {}
user_search_results = {}  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
user_current_search_page = {}  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
user_last_messages = {}  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

def clean_client_name(client_info: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞"""
    import re
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã +, -, (, ), –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'[\d\+\-\(\)\s]+', ' ', client_info)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = ' '.join(cleaned.split())
    return cleaned.strip()

def get_agent_phone_by_name(agent_name: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
    for phone, name in crm.agents.items():
        if name == agent_name:
            return phone
    return "N/A"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã deep-link
    if context.args and context.args[0].startswith('crm_'):
        crm_id = context.args[0].replace('crm_', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_states.get(user_id) == 'authenticated' and context.user_data.get('agent_name'):
            agent_name = context.user_data.get('agent_name')
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await update.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if user_id in user_last_messages:
                try:
                    await user_last_messages[user_id].delete()
                    del user_last_messages[user_id]
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if user_id in user_search_results:
                del user_search_results[user_id]
            if user_id in user_current_search_page:
                del user_current_search_page[user_id]
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            contract = crm.search_contract_by_crm_id(crm_id, agent_name)
            
            if contract:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                await show_contract_detail_by_contract(update, context, contract)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard = [
                    [InlineKeyboardButton("–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã", callback_data="my_contracts")],
                    [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="search_client")],
                    [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout_confirm")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                agent_phone = get_agent_phone_by_name(agent_name)
                await update.message.reply_text(
                    f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
                    f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º CRM ID –¥–ª—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            context.user_data['pending_crm_id'] = crm_id
            user_states[user_id] = 'waiting_phone'
            
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!\n\n"
                "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "87777777777"
            )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_states.get(user_id) == 'authenticated' and context.user_data.get('agent_name'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        agent_name = context.user_data.get('agent_name')
        
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã", callback_data="my_contracts")],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="search_client")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout_confirm")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        agent_phone = get_agent_phone_by_name(agent_name)
        await update.message.reply_text(
            f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ—Å–∏–º –ª–æ–≥–∏–Ω
        user_states[user_id] = 'waiting_phone'
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "87777777777"
        )

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logout"""
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = 'waiting_phone'
    context.user_data.clear()
    
    await update.message.reply_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != 'waiting_phone':
        return
    
    phone = update.message.text.strip()
    agent_name = crm.get_agent_by_phone(phone)
    
    if agent_name:
        user_states[user_id] = 'authenticated'
        context.user_data['agent_name'] = agent_name
        context.user_data['phone'] = phone
        
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã", callback_data="my_contracts")],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="search_client")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout_confirm")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π CRM ID
        pending_crm_id = context.user_data.get('pending_crm_id')
        if pending_crm_id:
            # –û—á–∏—â–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π CRM ID
            del context.user_data['pending_crm_id']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            contract = crm.search_contract_by_crm_id(pending_crm_id, agent_name)
            
            if contract:
                await loading_msg.delete()
                await show_contract_detail_by_contract(update, context, contract)
            else:
                await loading_msg.edit_text(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å CRM ID {pending_crm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫")
                agent_phone = get_agent_phone_by_name(agent_name)
                await update.message.reply_text(
                    f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
                    f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
        else:
            agent_phone = get_agent_phone_by_name(agent_name)
            await update.message.reply_text(
                f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
                f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    else:
        await update.message.reply_text(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def my_contracts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∞–≥–µ–Ω—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    agent_name = context.user_data.get('agent_name')
    
    if not agent_name:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞–≥–µ–Ω—Ç–∞
    contracts = crm.get_contracts_by_agent(agent_name)
    user_contracts[user_id] = contracts
    user_current_page[user_id] = 0
    
    if not contracts:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_contracts_page(query, contracts, 0)

async def show_contracts_page(query, contracts: List[Dict], page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏"""
    contracts_per_page = CONTRACTS_PER_PAGE
    start_idx = page * contracts_per_page
    end_idx = start_idx + contracts_per_page
    page_contracts = contracts[start_idx:end_idx]
    
    message = "–í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã:\n\n"
    
    keyboard = []
    for i, contract in enumerate(page_contracts):
        crm_id = contract.get('CRM ID', 'N/A')
        client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
        client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
        address = contract.get('–ê–¥—Ä–µ—Å', 'N/A')
        expires = contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')
        
        message += f"[CRM ID: {crm_id}](https://t.me/{BOT_USERNAME}?start=crm_{crm_id})\n"
        message += f"   –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
        message += f"   –ê–¥—Ä–µ—Å: {address}\n"
        message += f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"prev_page_{page}"))
    if end_idx < len(contracts):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è", callback_data=f"next_page_{page}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    edited_message = await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_id = query.from_user.id
    user_last_messages[user_id] = edited_message

async def show_search_results_page(message_or_query, contracts: List[Dict], page: int, client_name: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    contracts_per_page = CONTRACTS_PER_PAGE
    start_idx = page * contracts_per_page
    end_idx = start_idx + contracts_per_page
    page_contracts = contracts[start_idx:end_idx]
    
    message_text = f"–ù–∞–π–¥–µ–Ω–æ {len(contracts)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}':\n\n"
    
    keyboard = []
    for i, contract in enumerate(page_contracts):
        crm_id = contract.get('CRM ID', 'N/A')
        client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
        client_name_clean = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
        address = contract.get('–ê–¥—Ä–µ—Å', 'N/A')
        expires = contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')
        
        message_text += f"[CRM ID: {crm_id}](https://t.me/{BOT_USERNAME}?start=crm_{crm_id})\n"
        message_text += f"   –ö–ª–∏–µ–Ω—Ç: {client_name_clean}\n"
        message_text += f"   –ê–¥—Ä–µ—Å: {address}\n"
        message_text += f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"search_prev_page_{page}"))
    if end_idx < len(contracts):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è", callback_data=f"search_next_page_{page}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    if hasattr(message_or_query, 'edit_message_text'):
        # –≠—Ç–æ CallbackQuery
        edited_message = await message_or_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_id = message_or_query.from_user.id
        user_last_messages[user_id] = edited_message
    else:
        # –≠—Ç–æ Message
        edited_message = await message_or_query.edit_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_id = message_or_query.from_user.id
        user_last_messages[user_id] = edited_message

async def show_contract_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    agent_name = context.user_data.get('agent_name')
    if not agent_name:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    contract = crm.search_contract_by_crm_id(crm_id, agent_name)
    
    if not contract:
        await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    message = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –æ–±—ä–µ–∫—Ç–µ', 'N/A')}\n"
    message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ True
    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ False)
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ö–æ–ª–ª–∞–∂", callback_data=f"action_collage_{crm_id}")])
    
    if not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"analytics_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–°—Å—ã–ª–∫–∏", callback_data=f"links_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    data = query.data
    
    if data == "my_contracts":
        await my_contracts(update, context)
    
    elif data.startswith("contract_"):
        crm_id = data.replace("contract_", "")
        await show_contract_detail(update, context, crm_id)
    
    elif data.startswith("prev_page_"):
        page = int(data.replace("prev_page_", ""))
        user_id = update.effective_user.id
        contracts = user_contracts.get(user_id, [])
        await show_contracts_page(query, contracts, page - 1)
        user_current_page[user_id] = page - 1
    
    elif data.startswith("next_page_"):
        page = int(data.replace("next_page_", ""))
        user_id = update.effective_user.id
        contracts = user_contracts.get(user_id, [])
        await show_contracts_page(query, contracts, page + 1)
        user_current_page[user_id] = page + 1
    
    elif data.startswith("search_prev_page_"):
        page = int(data.replace("search_prev_page_", ""))
        user_id = update.effective_user.id
        contracts = user_search_results.get(user_id, [])
        client_name = context.user_data.get('last_search_client', '')
        await show_search_results_page(query, contracts, page - 1, client_name)
        user_current_search_page[user_id] = page - 1
    
    elif data.startswith("search_next_page_"):
        page = int(data.replace("search_next_page_", ""))
        user_id = update.effective_user.id
        contracts = user_search_results.get(user_id, [])
        client_name = context.user_data.get('last_search_client', '')
        await show_search_results_page(query, contracts, page + 1, client_name)
        user_current_search_page[user_id] = page + 1
    
    elif data.startswith("action_collage_"):
        crm_id = data.replace("action_collage_", "")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        success = crm.update_contract(crm_id, {"collage": True})
        if success:
            await query.answer("–ö–æ–ª–ª–∞–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                crm.refresh_agent_cache(agent_name)
                contract = crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    elif data.startswith("action_pro_collage_"):
        crm_id = data.replace("action_pro_collage_", "")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        success = crm.update_contract(crm_id, {"updatedCollage": True})
        if success:
            await query.answer("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                crm.refresh_agent_cache(agent_name)
                contract = crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    elif data.startswith("action_show_"):
        crm_id = data.replace("action_show_", "")
        agent_name = context.user_data.get('agent_name')
        
        if not agent_name:
            await query.answer("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –∏–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        contract = crm.search_contract_by_crm_id(crm_id, agent_name)
        if not contract:
            await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        current_show = int(contract.get('–ü–æ–∫–∞–∑', 0))
        
        success = crm.update_contract(crm_id, {"show": current_show + 1})
        if success:
            await query.answer(f"–ü–æ–∫–∞–∑ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {current_show + 1}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            crm.refresh_agent_cache(agent_name)
            contract = crm.search_contract_by_crm_id(crm_id, agent_name)
            if contract:
                await show_contract_detail_by_contract(update, context, contract)
            else:
                await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    elif data.startswith("analytics_done_"):
        crm_id = data.replace("analytics_done_", "")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        success = crm.update_contract(crm_id, {"analytics": True})
        
        if success:
            await query.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–Ω–∞—è")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                crm.refresh_agent_cache(agent_name)
                contract = crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    elif data.startswith("analytics_provided_"):
        crm_id = data.replace("analytics_provided_", "")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        success = crm.update_contract(crm_id, {"analyticsIn5Days": True})
        
        if success:
            await query.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                crm.refresh_agent_cache(agent_name)
                contract = crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
                else:
                    await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    elif data.startswith("analytics_"):
        crm_id = data.replace("analytics_", "")
        agent_name = context.user_data.get('agent_name')
        
        if not agent_name:
            await query.answer("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        contract = crm.search_contract_by_crm_id(crm_id, agent_name)
        
        if not contract:
            await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_done = contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', False)
        analytics_provided = contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π', False)
        
        keyboard = []
        if not analytics_done:
            keyboard.append([InlineKeyboardButton("–°–¥–µ–ª–∞–Ω–æ", callback_data=f"analytics_done_{crm_id}")])
        if not analytics_provided:
            keyboard.append([InlineKeyboardButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–ø–æ—Å–ª–µ 5 –¥–Ω–µ–π)", callback_data=f"analytics_provided_{crm_id}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"contract_{crm_id}")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ:", reply_markup=reply_markup)
    
    
    elif data.startswith("links_"):
        crm_id = data.replace("links_", "")
        await show_links_menu(update, context, crm_id)
    
    elif data.startswith("price_adjust_"):
        crm_id = data.replace("price_adjust_", "")
        user_id = update.effective_user.id
        user_states[user_id] = f'waiting_price_{crm_id}'
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è CRM ID {crm_id}:")
    
    elif data.startswith("view_links_"):
        crm_id = data.replace("view_links_", "")
        await show_links_view(update, context, crm_id)
    
    elif data.startswith("add_link_"):
        crm_id = data.replace("add_link_", "")
        await show_add_link_menu(update, context, crm_id)
    
    elif data.startswith("link_type_"):
        # –£–±–∏—Ä–∞–µ–º "link_type_" –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
        remaining = data.replace("link_type_", "")
        parts = remaining.split("_")
        crm_id = parts[0]
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ crm_id –æ–±—Ä–∞—Ç–Ω–æ –≤ link_type
        link_type = "_".join(parts[1:])
        user_id = update.effective_user.id
        user_states[user_id] = f'waiting_link_{crm_id}_{link_type}'
        
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è {link_type}:")
    
    elif data == "search_client":
        user_id = update.effective_user.id
        user_states[user_id] = 'waiting_client_search'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    
    elif data == "main_menu":
        user_id = update.effective_user.id
        agent_name = context.user_data.get('agent_name')
        
        if not agent_name:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã", callback_data="my_contracts")],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="search_client")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout_confirm")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        agent_phone = get_agent_phone_by_name(agent_name)
        await query.edit_message_text(
            f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif data == "logout_confirm":
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = 'waiting_phone'
        context.user_data.clear()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_id in user_last_messages:
            del user_last_messages[user_id]
        
        await query.edit_message_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

async def show_links_view(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    all_contracts = crm.get_all_contracts()
    contract = None
    
    for c in all_contracts:
        if str(c.get('CRM ID', '')) == str(crm_id):
            contract = c
            break
    
    if not contract:
        await query.edit_message_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    message = f"üîó –°—Å—ã–ª–∫–∏ –¥–ª—è CRM ID {crm_id}:\n\n"
    
    links = {
        "–ö—Ä—ã—à–∞": (contract.get('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É', ''), contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ', '')),
        "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º": (contract.get('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', ''), contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '')),
        "–¢–∏–∫—Ç–æ–∫": (contract.get('–¢–∏–∫ —Ç–æ–∫', ''), contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫', '')),
        "–†–∞—Å—Å—ã–ª–∫–∞": (contract.get('–†–∞—Å—Å—ã–ª–∫–∞', ''), contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞', '')),
        "–°—Ç—Ä–∏–º": (contract.get('–°—Ç—Ä–∏–º', ''), contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º', ''))
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    for platform, (primary_link, secondary_link) in links.items():
        if primary_link and primary_link.strip():
            message += f"üì± {platform}: {primary_link}\n"
        else:
            message += f"üì± {platform}: N/A\n"
    
    message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    # –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    for platform, (primary_link, secondary_link) in links.items():
        if secondary_link and secondary_link.strip():
            message += f"üì± {platform} (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): {secondary_link}\n"
        else:
            message += f"üì± {platform} (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): N/A\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Å—ã–ª–∫–∞–º", callback_data=f"links_{crm_id}")],
        [InlineKeyboardButton("üîô –ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É", callback_data=f"contract_{crm_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def show_add_link_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    agent_name = context.user_data.get('agent_name')
    contract = None
    if agent_name:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        crm.refresh_agent_cache(agent_name)
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–µ—à–∞
        contract = crm.search_contract_by_crm_id(crm_id, agent_name)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–æ–π
    def create_button(text, callback_data, has_link=False):
        button_text = f"‚úÖ {text}" if has_link else text
        return InlineKeyboardButton(button_text, callback_data=callback_data)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—è
    def is_field_filled(value):
        if value is None:
            return False
        if isinstance(value, str):
            return bool(value.strip())
        return bool(value)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    links_status = {
        'krisha': contract.get('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—Ä—ã—à—É', '') if contract else '',
        'krisha_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∫—Ä—ã—à–µ', '') if contract else '',
        'instagram': contract.get('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', '') if contract else '',
        'instagram_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º', '') if contract else '',
        'tiktok': contract.get('–¢–∏–∫ —Ç–æ–∫', '') if contract else '',
        'tiktok_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –¢–∏–∫ —Ç–æ–∫', '') if contract else '',
        'mailing': contract.get('–†–∞—Å—Å—ã–ª–∫–∞', '') if contract else '',
        'mailing_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞', '') if contract else '',
        'stream': contract.get('–°—Ç—Ä–∏–º', '') if contract else '',
        'stream_update': contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –°—Ç—Ä–∏–º', '') if contract else ''
    }
    
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        [create_button("–ö—Ä—ã—à–∞", f"link_type_{crm_id}_krisha", is_field_filled(links_status['krisha']))],
        [create_button("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", f"link_type_{crm_id}_instagram", is_field_filled(links_status['instagram']))],
        [create_button("–¢–∏–∫—Ç–æ–∫", f"link_type_{crm_id}_tiktok", is_field_filled(links_status['tiktok']))],
        [create_button("–†–∞—Å—Å—ã–ª–∫–∞", f"link_type_{crm_id}_mailing", is_field_filled(links_status['mailing']))],
        [create_button("–°—Ç—Ä–∏–º", f"link_type_{crm_id}_stream", is_field_filled(links_status['stream']))],
        
        # –°—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        [create_button("–ö—Ä—ã—à–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_krisha_update", is_field_filled(links_status['krisha_update']))],
        [create_button("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_instagram_update", is_field_filled(links_status['instagram_update']))],
        [create_button("–¢–∏–∫—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_tiktok_update", is_field_filled(links_status['tiktok_update']))],
        [create_button("–†–∞—Å—Å—ã–ª–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_mailing_update", is_field_filled(links_status['mailing_update']))],
        [create_button("–°—Ç—Ä–∏–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)", f"link_type_{crm_id}_stream_update", is_field_filled(links_status['stream_update']))],
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Å—ã–ª–∫–∞–º", callback_data=f"links_{crm_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def show_links_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, crm_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Å—ã–ª–∫–∏", callback_data=f"view_links_{crm_id}")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"add_link_{crm_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"contract_{crm_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=reply_markup)

async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∏ —Å—Å—ã–ª–æ–∫"""
    user_id = update.effective_user.id
    state = user_states.get(user_id, '')
    
    if state.startswith('waiting_price_'):
        crm_id = state.replace('waiting_price_', '')
        new_price = update.message.text.strip()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        success = crm.update_contract(crm_id, {"priceAdjustment": new_price})
        
        if success:
            await loading_msg.edit_text(f"–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_price}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            agent_name = context.user_data.get('agent_name')
            if agent_name:
                contract = crm.search_contract_by_crm_id(crm_id, agent_name)
                if contract:
                    await show_contract_detail_by_contract(update, context, contract)
            user_states[user_id] = 'authenticated'
        else:
            await loading_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
    
    elif state.startswith('waiting_link_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
        remaining = state.replace('waiting_link_', '')
        parts = remaining.split('_')
        crm_id = parts[0]
        link_type = '_'.join(parts[1:])
        link_url = update.message.text.strip()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        agent_name = context.user_data.get('agent_name')
        if not agent_name:
            await loading_msg.edit_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        contract = crm.search_contract_by_crm_id(crm_id, agent_name)
        if not contract:
            await loading_msg.edit_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–µ –ø–æ–ª–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
        field_mapping = {
            'krisha': 'krishaUpload',
            'krisha_update': 'priceUpdateKrisha',
            'instagram': 'instagram',
            'instagram_update': 'priceUpdateInstagram',
            'tiktok': 'tikTok',
            'tiktok_update': 'priceUpdateTikTok',
            'mailing': 'mailing',
            'mailing_update': 'priceUpdateMailing',
            'stream': 'stream',
            'stream_update': 'priceUpdateStream'
        }
        
        field_name = field_mapping.get(link_type)
        if not field_name:
            await loading_msg.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_names = {
            'krisha': '–ö—Ä—ã—à–∞',
            'krisha_update': '–ö—Ä—ã—à–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'instagram': '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º',
            'instagram_update': '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'tiktok': '–¢–∏–∫—Ç–æ–∫',
            'tiktok_update': '–¢–∏–∫—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'mailing': '–†–∞—Å—Å—ã–ª–∫–∞',
            'mailing_update': '–†–∞—Å—Å—ã–ª–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)',
            'stream': '–°—Ç—Ä–∏–º',
            'stream_update': '–°—Ç—Ä–∏–º (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)'
        }
        
        field_display_name = display_names.get(link_type, link_type)
        
        success = crm.update_contract(crm_id, {field_name: link_url})
        if success:
            await loading_msg.edit_text(f"–°—Å—ã–ª–∫–∞ {field_display_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–≥–µ–Ω—Ç–∞
            crm.refresh_agent_cache(agent_name)
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            contract = crm.search_contract_by_crm_id(crm_id, agent_name)
            if contract:
                await show_contract_detail_by_contract(update, context, contract)
        else:
            await loading_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
        
        user_states[user_id] = 'authenticated'

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    state = user_states.get(user_id, '')
    
    
    if state == 'waiting_phone':
        await handle_phone(update, context)
    elif state.startswith('waiting_price_') or state.startswith('waiting_link_'):
        await handle_price_input(update, context)
    elif state == 'waiting_client_search':
        await handle_client_search(update, context)


async def handle_client_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    client_name = update.message.text.strip()
    agent_name = context.user_data.get('agent_name')
    
    if not agent_name:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        user_states[user_id] = 'authenticated'
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await update.message.reply_text("–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    contracts = crm.search_contracts_by_client_name(client_name, agent_name)
    
    if contracts:
        if len(contracts) == 1:
            await show_contract_detail_by_contract(update, context, contracts[0])
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            user_search_results[user_id] = contracts
            user_current_search_page[user_id] = 0
            context.user_data['last_search_client'] = client_name
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await show_search_results_page(loading_msg, contracts, 0, client_name)
    else:
        await loading_msg.edit_text(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã", callback_data="my_contracts")],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="search_client")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout_confirm")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        agent_phone = get_agent_phone_by_name(agent_name)
        await update.message.reply_text(
            f"–ê–≥–µ–Ω—Ç: {agent_name}\n"
            f"–ù–æ–º–µ—Ä: {agent_phone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    user_states[user_id] = 'authenticated'

async def show_contract_detail_by_contract_edit(message, context: ContextTypes.DEFAULT_TYPE, contract: Dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    crm_id = contract.get('CRM ID', 'N/A')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    message_text = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message_text += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message_text += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message_text += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message_text += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message_text += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message_text += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –æ–±—ä–µ–∫—Ç–µ', 'N/A')}\n"
    message_text += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message_text += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message_text += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ True
    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message_text += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message_text += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message_text += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message_text += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ False)
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ö–æ–ª–ª–∞–∂", callback_data=f"action_collage_{crm_id}")])
    
    if not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"analytics_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–°—Å—ã–ª–∫–∏", callback_data=f"links_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.edit_text(message_text, reply_markup=reply_markup)

async def show_contract_detail_by_contract(update: Update, context: ContextTypes.DEFAULT_TYPE, contract: Dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    crm_id = contract.get('CRM ID', 'N/A')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    message = f"üìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ CRM ID: {crm_id}\n\n"
    message += f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: {contract.get('–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è', 'N/A')}\n"
    message += f"üë§ –ú–û–ü: {contract.get('–ú–û–ü', 'N/A')}\n"
    message += f"üë§ –†–û–ü: {contract.get('–†–û–ü', 'N/A')}\n"
    client_info = contract.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä', 'N/A')
    client_name = clean_client_name(client_info) if client_info != 'N/A' else 'N/A'
    message += f"üìû –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
    message += f"üè† –ê–¥—Ä–µ—Å: {contract.get('–ê–¥—Ä–µ—Å', 'N/A')}\n"
    message += f"üí∞ –¶–µ–Ω–∞: {contract.get('–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –æ–±—ä–µ–∫—Ç–µ', 'N/A')}\n"
    message += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {contract.get('–ò—Å—Ç–µ–∫–∞–µ—Ç', 'N/A')}\n"
    message += f"üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã: {contract.get('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã', 'N/A')}\n"
    message += f"üëÅÔ∏è –ü–æ–∫–∞–∑—ã: {contract.get('–ü–æ–∫–∞–∑', 0)}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ True
    if contract.get('–ö–æ–ª–ª–∞–∂'):
        message += "‚úÖ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        message += "‚úÖ –ü—Ä–æ—Ñ –ö–æ–ª–ª–∞–∂\n"
    if contract.get('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-—Å–¥–µ–ª–∞–Ω–æ\n"
    if contract.get('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π'):
        message += "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞-–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ False)
    if not contract.get('–ö–æ–ª–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ö–æ–ª–ª–∞–∂", callback_data=f"action_collage_{crm_id}")])
    
    if not contract.get('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–ª–∞–∂'):
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ—Ñ –∫–æ–ª–ª–∞–∂", callback_data=f"action_pro_collage_{crm_id}")])
    
    keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑ +1", callback_data=f"action_show_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"analytics_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–°—Å—ã–ª–∫–∏", callback_data=f"links_{crm_id}")])
    keyboard.append([InlineKeyboardButton("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã", callback_data=f"price_adjust_{crm_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_contracts")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ callback_query (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫) –∏–ª–∏ message (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if update.callback_query:
        # –î–ª—è callback query —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        sent_message = await update.message.reply_text(message, reply_markup=reply_markup)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_id = update.effective_user.id
        user_last_messages[user_id] = sent_message


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("logout", logout))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
